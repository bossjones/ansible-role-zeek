---
- name: Vault | Decrypt secrets
  hosts: localhost
  connection: local
  pre_tasks:
    - name: decrypt all secret vars
      shell: "ansible-vault decrypt {{item}}"
      ignore_errors: yes
      changed_when: false
      failed_when: false
      with_fileglob:
        - "vars/secret/*"

# sudo ansible-playbook -i "localhost," -c local playbook.yml
# sudo ansible-playbook -i "localhost," -c local playbook.yml --extra-vars="bossjones__zeek__user=$(whoami)"
# sudo ansible-playbook --ask-become-pass --check -i "localhost," -c local playbook.yml --extra-vars="bossjones__zeek__user=$(whoami)"
- hosts: localhost
  connection: local
  become: yes
  vars:
    rbenv:
      env: system
      version: v1.1.2
      default_ruby: 2.5.1
      rubies:
        - version: 2.5.1

    rbenv_clean_up: false

    rbenv_repo: "https://github.com/rbenv/rbenv.git"

    rbenv_plugins:
      - { name: "rbenv-vars",         repo: "https://github.com/rbenv/rbenv-vars.git",         version: "master" }
      - { name: "ruby-build",         repo: "https://github.com/rbenv/ruby-build.git",         version: "master" }
      - { name: "rbenv-default-gems", repo: "https://github.com/rbenv/rbenv-default-gems.git", version: "master" }
      - { name: "rbenv-installer",    repo: "https://github.com/rbenv/rbenv-installer.git",    version: "master" }
      - { name: "rbenv-update",       repo: "https://github.com/rkh/rbenv-update.git",         version: "master" }
      - { name: "rbenv-whatis",       repo: "https://github.com/rkh/rbenv-whatis.git",         version: "master" }
      - { name: "rbenv-use",          repo: "https://github.com/rkh/rbenv-use.git",            version: "master" }

    rbenv_root: "{% if rbenv.env == 'system' %}/usr/local/rbenv{% else %}~/.rbenv{% endif %}"

    rbenv_set_vars: true

    rbenv_users: []

    rbenv_extra_depends:
    - libssl1.0-dev
    - build-essential
    - bison
    - ruby-dev
    - rake
    - zlib1g-dev
    - libyaml-dev
    - libssl-dev
    - libreadline-dev
    - libncurses5-dev
    - llvm
    - llvm-dev
    - libeditline-dev
    - libedit-dev
    rbenv_apt_packages:
    - build-essential
    - curl
    - git
    - libcurl4-openssl-dev
    - libffi-dev
    - libreadline-dev
    - libssl-dev
    - libxml2-dev
    - libxslt1-dev
    - zlib1g-dev
    rbenv_dnf_packages:
    - curl
    - gcc
    - openssl-devel
    - libyaml-devel
    - readline-devel
    - zlib-devel
    - libffi-devel
    - git
    rbenv_yum_packages:
    - bzip2
    - curl
    - gcc
    - git
    - libffi-devel
    - libyaml-devel
    - openssl-devel
    - readline-devel
    - zlib-devel
    bossjones__oh__my__zsh__install_fzf: "no"
    bossjones__oh__my__zsh__enable_zlogin: "yes"
    bossjones__oh__my__zsh__enable_zlogout: "yes"
    bossjones__oh__my__zsh__enable_zprofile: "no"
    bossjones__oh__my__zsh__enable_zshenv: "yes"
    bossjones__oh__my__zsh__change_default_shell: no
    bossjones__oh__my__zsh__path_to_shell: /bin/zsh
    bossjones__oh__my__zsh__antigen_bundles_extras:
      - joel-porquet/zsh-dircolors-solarized
      - mollifier/anyframe
      - zdharma/fast-syntax-highlighting
      - wfxr/forgit
      # - { name: davidparsson/zsh-pyenv-lazy, command: pyenv }
      - { name: eventi/noreallyjustfuckingstopalready, command: killall }
      # https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins
      - { name: vscode, command: code }
      - { name: gpg-agent, command: gpg-agent }
      - history
      - { name: autopep8, command: autopep8 }
      - { name: pipenv, command: pipenv }
      - { name: pylint, command: pylint }
      - { name: ELLIOTTCABLE/rbenv.plugin.zsh, command: ruby }
      - { name: colored-man-pages, command: man }
      - { name: srijanshetty/node.plugin.zsh, command: node }
      - { name: bossjones/boss-git-zsh-plugin, command: git }
      - { name: bossjones/boss-docker-zsh-plugin, command: docker }
      # A zsh plugin to sync git repositories and clean them up.
      - caarlos0/zsh-git-sync

      # Because your terminal should be able to perform tasks asynchronously without external tools!
      - mafredri/zsh-async
      # Desktop notifications for long-running commands in zsh.
      - marzocchi/zsh-notify
      # Add zsh's missing hooks, and support for user-defined hooks
      - willghatch/zsh-hooks

      # A collection of git utilities and useful extra git scripts I've discovered or written, packaged for ease of use with shell frameworks.
      - unixorn/git-extra-commands

      # alias for docker aliases
      - { name: luismayta/zsh-docker-aliases, command: docker }
      # servers functions for shell
      - luismayta/zsh-servers-functions
      # Search ssh connect with peco
      - { name: luismayta/zsh-peco-ssh-connect, command: peco }

      # Plugin for lazy-loading pyenv in zsh.
      - { name: erikced/zsh-pyenv-lazy-load, command: pyenv }
      - { name: vagrant, command: vagrant }

      # This ZSH plugin enhances the terminal environment with 256 colors. It looks at the chosen TERM environment variable and sees if there is respective (n-)curses' termcap/terminfo descriptors for 256 colors available. The result is a multicolor terminal, if available.
      - chrissicool/zsh-256color

      # Convert seconds to a human readable string: 165392 → 1d 21h 56m 32s
      - sindresorhus/pretty-time-zsh

    bossjones__oh__my__zsh__autosuggestions_bind_key: "^U"
    bossjones__oh__my__zsh__path:
      - $HOME/bin
      - $HOME/.local/bin
      - $HOME/.pyenv/bin
      - /usr/local/rbenv/bin
      # - /usr/local/opt/coreutils/libexec/gnubin
      - /usr/local/sbin
      - /usr/local/bin
      - /usr/sbin
      - /usr/bin
      - /sbin
      - /bin
      - /usr/games
      - /usr/local/games

    bossjones__oh__my__zsh__zlogin: |-
      # https://unix.stackexchange.com/questions/71253/what-should-shouldnt-go-in-zshenv-zshrc-zlogin-zprofile-zlogout
      #
      # Executes commands at login post-zshrc.
      #
      # Authors:
      #   Sorin Ionescu <sorin.ionescu@gmail.com>
      #
      # /etc/zsh/zlogin: system-wide .zlogin file for zsh(1).
      #
      # This file is sourced only for login shells. It
      # should contain commands that should be executed only
      # in login shells. It should be used to set the terminal
      # type and run a series of external commands (fortune,
      # msgs, from, etc.)
      #
      # Global Order: zshenv, zprofile, zshrc, zlogin

      source ~/.zshrc

    bossjones__oh__my__zsh__before_scripts:
      # - name: rust.zsh
      #   content: |-
      #     if [ -d "$HOME/.cargo/bin" ]; then
      #       export PATH=$HOME/.cargo/bin:$PATH
      #     fi

      - name: workon.zsh
        content: |-
          export WORKON_HOME="$HOME/.pyenv/versions"
          export PROJECT_HOME=$HOME/dev

    bossjones__oh__my__zsh__after_scripts:
      - name: gnubin.zsh
        content: |-
          alias ls="gls --color=always"

      - name: fzf.zsh
        content: |
          [ -f ~/.fzf.zsh ] && . ~/.fzf.zsh

      - name: unixorn.zsh
        content: |
          # SOURCE: https://github.com/unixorn/zsh-quickstart-kit/blob/master/zsh/.zsh_aliases
          # aliases borrowed from unixorn
          alias historysummary="history | awk '{a[\$2]++} END{for(i in a){printf \"%5d\t%s\n\",a[i],i}}' | sort -rn | head"

          # A couple of different external IP lookups depending on which is down.
          alias external_ip="curl -s icanhazip.com"
          alias myip="dig +short myip.opendns.com @resolver1.opendns.com"

          # Show laptop's IP addresses
          alias ips="ifconfig -a | perl -nle'/(\d+\.\d+\.\d+\.\d+)/ && print $1'"

          # SSH stuff
          # Pass our credentials by default
          alias sshA='ssh -A'
          alias ssh-A='ssh -A'
          alias ssh-unkeyed='/usr/bin/ssh'
          alias ssh_unkeyed='/usr/bin/ssh'

          alias scp-no-hostchecks='scp -o UserKnownHostsFile=/dev/null -o GlobalKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
          alias ssh-no-hostchecks='ssh -A -o UserKnownHostsFile=/dev/null -o GlobalKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
          alias scp_no_hostchecks='scp -o UserKnownHostsFile=/dev/null -o GlobalKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
          alias ssh_no_hostchecks='ssh -A -o UserKnownHostsFile=/dev/null -o GlobalKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'

          # Set up even more shortcuts because I am that lazy a typist.
          alias nh-scp=scp-no-hostchecks
          alias nh-ssh=ssh-no-hostchecks
          alias nh_scp=scp-no-hostchecks
          alias nh_ssh=ssh-no-hostchecks
          alias nhscp=scp-no-hostchecks
          alias nhssh=ssh-no-hostchecks

          # Strip color codes from commands that insist on spewing them so we can
          # pipe them into files cleanly.
          alias stripcolors='sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g"'

          # lists zombie processes
          zombie() {
            ps aux | awk '{if ($8=="Z") { print $2 }}'
          }
          alias zombies=zombie


    bossjones__oh__my__zsh__zshrc_local: |-
      export RBENV_ROOT=/usr/local/rbenv
      export RBENV_VERSION=2.5.1
      export VIRTUAL_ENV_DISABLE_PROMPT=1
      export ZSH_PYENV_LAZY_VIRTUALENV=1

      # set some history options
      setopt append_history
      setopt extended_history
      setopt hist_expire_dups_first
      setopt hist_ignore_all_dups
      setopt hist_ignore_dups
      setopt hist_ignore_space
      setopt hist_reduce_blanks
      setopt hist_save_no_dups
      setopt hist_verify
      setopt INC_APPEND_HISTORY
      unsetopt HIST_BEEP

      # Share your history across all your terminal windows
      setopt share_history
      #setopt noclobber

      # Larger bash history (allow 32³ entries; default is 500)

      HISTSIZE=100000
      SAVEHIST=100000
      HISTFILE="$HOME/.zsh_history"
      # export HISTCONTROL=ignoredups

      # Prefer US English and use UTF-8
      export LANG=en_US.UTF-8
      export LC_ALL=en_US.UTF-8

      alias reload!='exec "$SHELL" -l'

      # setopt HIST_FIND_NO_DUPS

      # Add some completions settings
      setopt ALWAYS_TO_END     # Move cursor to the end of a completed word.
      setopt AUTO_LIST         # Automatically list choices on ambiguous completion.
      setopt AUTO_MENU         # Show completion menu on a successive tab press.
      setopt AUTO_PARAM_SLASH  # If completed parameter is a directory, add a trailing slash.
      setopt COMPLETE_IN_WORD  # Complete from both ends of a word.
      unsetopt MENU_COMPLETE   # Do not autoselect the first completion entry.

      # Long running processes should return time after they complete. Specified
      # in seconds.
      REPORTTIME=2
      TIMEFMT="%U user %S system %P cpu %*Es total"

      # # Speed up autocomplete, force prefix mapping
      # zstyle ':completion:*' accept-exact '*(N)'
      # zstyle ':completion:*' use-cache on
      # zstyle ':completion:*' cache-path ~/.zsh/cache
      # zstyle -e ':completion:*:default' list-colors 'reply=("${PREFIX:+=(#bi)($PREFIX:t)*==34=34}:${(s.:.)LS_COLORS}")';

      if [ -n "$(which direnv)" ]; then
          eval "$(direnv hook zsh)"
      fi

      [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

      # remove dupes from $PATH using a zsh builtin
      # https://til.hashrocket.com/posts/7evpdebn7g-remove-duplicates-in-zsh-path
      typeset -aU path;

      # # Load iTerm shell integrations if found.
      # test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

      # Expand aliases inline - see http://blog.patshead.com/2012/11/automatically-expaning-zsh-global-aliases---simplified.html
      globalias() {
         if [[ $LBUFFER =~ ' [A-Z0-9]+$' ]]; then
           zle _expand_alias
           zle expand-word
         fi
         zle self-insert
      }

      zle -N globalias

      bindkey " " globalias
      bindkey "^ " magic-space           # control-space to bypass completion
      bindkey -M isearch " " magic-space # normal space during searches

  # pre_tasks:
  #   - name: Install/Setup zsh
  #     package:
  #       name: '{{ item }}'
  #       state: latest
  #     with_items:
  #       - zsh
  #     when: ansible_os_family == "Debian"

  #   - name: Clone fzf
  #     git:
  #       repo: https://github.com/junegunn/fzf.git
  #       dest: "~{{bossjones__oh__my__zsh__user}}/.fzf"
  #       version: "0.18.0"
  #       force: yes
  #     become: yes
  #     become_user: "{{ bossjones__oh__my__zsh__user }}"
  #     register: bossjones__oh__my__zsh__register_fzf

  #   - name: Install fzf
  #     shell: ./install --all chdir=/home/vagrant/.fzf
  #     become: yes
  #     become_user: vagrant

  roles:
    - ../zzet.rbenv
    - ../ansible-role-tmux
    - ../ansible-role-tmuxinator
    - ../ansible-role-oh-my-zsh
    - role: boss-ansible-role-sysctl
      bossjones__user: root
      bossjones__group: root
      bossjones__sysctl__host_parameters:
        'net.ipv6.conf.all.disable_ipv6':
          value: 1
          comment: |
            Disable IPv6 on all interfaces.
          state: "present"
        'net.core.somaxconn':
          value: 16384
          comment: |
            Limit of socket listen() backlog, known in userspace as SOMAXCONN.
            Defaults to 128.  See also tcp_max_syn_backlog for additional tuning
            for TCP sockets.
          state: "present"
        'net.ipv4.conf.all.accept_source_route':
          value: 0
          comment: |
            Our hosts aren't routers, so we can lock them down a bit
          state: "present"
        'net.ipv4.conf.all.send_redirects':
          value: 0
          comment: |
            Our hosts aren't routers, so we can lock them down a bit
          state: "present"
        'net.ipv4.conf.all.secure_redirects':
          value: 0
          comment: |
            Our hosts aren't routers, so we can lock them down a bit
          state: "present"
        'net.ipv4.conf.default.accept_redirects':
          value: 0
          comment: |
            Our hosts aren't routers, so we can lock them down a bit
          state: "present"
        'net.ipv4.conf.default.send_redirects':
          value: 0
          comment: |
            Our hosts aren't routers, so we can lock them down a bit
          state: "present"
        'net.ipv4.conf.default.secure_redirects':
          value: 0
          comment: |
            Our hosts aren't routers, so we can lock them down a bit
          state: "present"
        'net.ipv4.ip_local_port_range':
          value: 1024 65535
          comment: |
            Expanded so we don't run out of ephemeral ports, which are used by containers in BRIDGE mode (the default) and all outgoing connections from containers and our proxy
          state: "present"
        'net.core.rmem_default':
          value: 1048576
          comment: |
            Buffers. We choose high throughput over low latency.
          state: "present"
        'net.core.wmem_default':
          value: 1048576
          comment: |
            Buffers. We choose high throughput over low latency.
          state: "present"
        'net.core.rmem_max':
          value: 10485760
          comment: |
            Buffers. We choose high throughput over low latency.
          state: "present"
        'net.core.wmem_max':
          value: 10485760
          comment: |
            Buffers. We choose high throughput over low latency.
          state: "present"


- hosts: localhost
  connection: local
  gather_facts: True
  become: true
  strategy: free
  pre_tasks:
    - ping:
    - name: dynamically include vars directory (recursively)
      include_vars:
        dir: "vars/secret"
        ignore_unknown_extensions: True
        extensions: ['', 'yaml', 'yml', 'json', 'vault']
      no_log: True
  roles:
    - ../ansible-role-zeek
    - role: ../ansible-role-osquery
      fleet_hostname: ubuntu-kolide
      graylog_hostname: ubuntu-kolide


  post_tasks:
    # Now that everything has been re-run w/ cluster specific values, lets go ahead and enable everything we care about
    - name: reload systemd configuration
      become: yes
      command: systemctl daemon-reload

    - name: Handle errors for osquery
      block:
        # Restart service and ensure it is enabled
        - name: start and enable osquery
          become: yes
          service: name=osqueryd state=restarted enabled=yes
      rescue:
        - name: encrypt all secret vars
          shell: "journalctl --no-pager --since today -u osqueryd.service"
          ignore_errors: yes
          changed_when: false
          failed_when: false
          register: journalctl_result

        - name: Debug | journalctl dump
          debug:
            var: journalctl_result.stdout
      always:
        - name: encrypt all secret vars
          shell: "journalctl --no-pager --since today -u osqueryd.service"
          ignore_errors: yes
          changed_when: false
          failed_when: false
          register: journalctl_result

        - name: Debug | journalctl dump
          debug:
            var: journalctl_result.stdout

- name: Prepare | re encrypt values
  hosts: localhost
  connection: local
  environment:
    ANSIBLE_VAULT_PASSWORD_FILE: ~/.vault_password_personal.txt
  pre_tasks:
    - name: encrypt all secret vars
      shell: "ansible-vault encrypt {{item}}"
      ignore_errors: yes
      changed_when: false
      failed_when: false
      with_fileglob:
        - "vars/secret/*"

  # roles:
  #   - ../zzet.rbenv
  #   - ../ansible-role-tmux

# - hosts: localhost
#   connection: local
#   become: true
#   roles:
#     - ../ansible-role-zeek

